{"ast":null,"code":"const {\n  Kafka\n} = require('kafkajs');\nconst axios = require('axios');\nconst kafka = new Kafka({\n  clientId: 'weather-alerts',\n  brokers: ['localhost:9092']\n});\nconst producer = kafka.producer();\n\n// Function to fetch weather data\nasync function getWeatherData(location) {\n  const response = await axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${location.lat}&longitude=${location.lon}&current_weather=true`);\n  return response.data.current_weather;\n}\n\n// Function to produce a message to Kafka\nasync function sendAlertToKafka(topic, message) {\n  await producer.send({\n    topic: `weather-alerts-${topic}`,\n    messages: [{\n      value: message\n    }]\n  });\n  console.log(`Sent alert to topic: ${topic}`);\n}\nasync function startProducer() {\n  await producer.connect();\n  console.log('Producer connected');\n\n  // Example: Send weather data to topics\n  const locations = {\n    LosAngeles: {\n      lat: 34.0522,\n      lon: -118.2437\n    },\n    SanFrancisco: {\n      lat: 37.7749,\n      lon: -122.4194\n    },\n    SouthernCalifornia: {\n      lat: 34.0522,\n      lon: -118.2437\n    } // Example location\n  };\n  for (const [topic, coordinates] of Object.entries(locations)) {\n    const weatherData = await getWeatherData(coordinates);\n    const alertMessage = `Weather alert for ${topic}: ${weatherData.temperature}°C, Windspeed: ${weatherData.windspeed} km/h.`;\n    await sendAlertToKafka(topic, alertMessage);\n  }\n}\nstartProducer();","map":{"version":3,"names":["Kafka","require","axios","kafka","clientId","brokers","producer","getWeatherData","location","response","get","lat","lon","data","current_weather","sendAlertToKafka","topic","message","send","messages","value","console","log","startProducer","connect","locations","LosAngeles","SanFrancisco","SouthernCalifornia","coordinates","Object","entries","weatherData","alertMessage","temperature","windspeed"],"sources":["/Users/sumithramounika/Desktop/SCU courses/distributed systems/MY  DS/weather-app/weather-frontend/src/App.js"],"sourcesContent":["const { Kafka } = require('kafkajs');\nconst axios = require('axios');\n\nconst kafka = new Kafka({\n  clientId: 'weather-alerts',\n  brokers: ['localhost:9092'],\n});\n\nconst producer = kafka.producer();\n\n// Function to fetch weather data\nasync function getWeatherData(location) {\n  const response = await axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${location.lat}&longitude=${location.lon}&current_weather=true`);\n  return response.data.current_weather;\n}\n\n// Function to produce a message to Kafka\nasync function sendAlertToKafka(topic, message) {\n  await producer.send({\n    topic: `weather-alerts-${topic}`,\n    messages: [\n      { value: message },\n    ],\n  });\n  console.log(`Sent alert to topic: ${topic}`);\n}\n\nasync function startProducer() {\n  await producer.connect();\n  console.log('Producer connected');\n\n  // Example: Send weather data to topics\n  const locations = {\n    LosAngeles: { lat: 34.0522, lon: -118.2437 },\n    SanFrancisco: { lat: 37.7749, lon: -122.4194 },\n    SouthernCalifornia: { lat: 34.0522, lon: -118.2437 }, // Example location\n  };\n\n  for (const [topic, coordinates] of Object.entries(locations)) {\n    const weatherData = await getWeatherData(coordinates);\n    const alertMessage = `Weather alert for ${topic}: ${weatherData.temperature}°C, Windspeed: ${weatherData.windspeed} km/h.`;\n    await sendAlertToKafka(topic, alertMessage);\n  }\n}\n\nstartProducer();\n"],"mappings":"AAAA,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAME,KAAK,GAAG,IAAIH,KAAK,CAAC;EACtBI,QAAQ,EAAE,gBAAgB;EAC1BC,OAAO,EAAE,CAAC,gBAAgB;AAC5B,CAAC,CAAC;AAEF,MAAMC,QAAQ,GAAGH,KAAK,CAACG,QAAQ,CAAC,CAAC;;AAEjC;AACA,eAAeC,cAAcA,CAACC,QAAQ,EAAE;EACtC,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,mDAAmDF,QAAQ,CAACG,GAAG,cAAcH,QAAQ,CAACI,GAAG,uBAAuB,CAAC;EAClJ,OAAOH,QAAQ,CAACI,IAAI,CAACC,eAAe;AACtC;;AAEA;AACA,eAAeC,gBAAgBA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAC9C,MAAMX,QAAQ,CAACY,IAAI,CAAC;IAClBF,KAAK,EAAE,kBAAkBA,KAAK,EAAE;IAChCG,QAAQ,EAAE,CACR;MAAEC,KAAK,EAAEH;IAAQ,CAAC;EAEtB,CAAC,CAAC;EACFI,OAAO,CAACC,GAAG,CAAC,wBAAwBN,KAAK,EAAE,CAAC;AAC9C;AAEA,eAAeO,aAAaA,CAAA,EAAG;EAC7B,MAAMjB,QAAQ,CAACkB,OAAO,CAAC,CAAC;EACxBH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;EAEjC;EACA,MAAMG,SAAS,GAAG;IAChBC,UAAU,EAAE;MAAEf,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAS,CAAC;IAC5Ce,YAAY,EAAE;MAAEhB,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAS,CAAC;IAC9CgB,kBAAkB,EAAE;MAAEjB,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAS,CAAC,CAAE;EACxD,CAAC;EAED,KAAK,MAAM,CAACI,KAAK,EAAEa,WAAW,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACN,SAAS,CAAC,EAAE;IAC5D,MAAMO,WAAW,GAAG,MAAMzB,cAAc,CAACsB,WAAW,CAAC;IACrD,MAAMI,YAAY,GAAG,qBAAqBjB,KAAK,KAAKgB,WAAW,CAACE,WAAW,kBAAkBF,WAAW,CAACG,SAAS,QAAQ;IAC1H,MAAMpB,gBAAgB,CAACC,KAAK,EAAEiB,YAAY,CAAC;EAC7C;AACF;AAEAV,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}